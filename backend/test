import express from 'express';
import mysql from 'mysql2';
import bodyParser from 'body-parser';
import jwt from 'jsonwebtoken';
import nodemailer from 'nodemailer';

const app = express();
app.use(bodyParser.json());
app.use((req, res, next) => {
  console.log('Request Method:', req.method); // Log the method
  console.log('Request URL:', req.url); // Log the URL
  console.log('Request Headers:', req.headers); // Log headers
  console.log('Request Body:', req.body); // Log bodyaa
  next();
});

const secretKey = 'portal'; // JWT secret key
const otpExpiryTime = 5 * 60 * 1000; // OTP expiry time in milliseconds (5 minutes)

// Setup MySQL connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'portal'
});

db.connect(err => {
  if (err) {
    console.error('Error connecting to the database:', err);
    return;
  }
  console.log('Connected to MySQL database.');
});

// Utility to send OTP via email (mock email sender)
const sendOtpEmail = (email, otp) => {
  let transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: 'kidusamanuel0371@gmail.com',
      pass: '123456789'
    }
  });

  let mailOptions = {
    from: 'kidusamanuel0371@gmail.com',
    to: email,
    subject: 'Your OTP for Portal Login',
    text: `Your OTP code is: ${otp}`
  };

  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.error('Error sending OTP email:', error);
    } else {
      console.log('OTP email sent:', info.response);
    }
  });
};

// Generate random OTP
const generateOtp = () => {
  return Math.floor(100000 + Math.random() * 900000).toString(); // 6-digit OTP
};

// Middleware to authenticate JWT token
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Extract token

  if (!token) return res.sendStatus(401); // No token, unauthorized

  jwt.verify(token, secretKey, (err, user) => {
    if (err) {
      console.error('Token verification error:', err);
      return res.sendStatus(403); // Invalid token, forbidden
    }
    req.user = user; // Save user information from token
    next();
  });
};

// Logging middleware
app.use((req, res, next) => {
  console.log('Request Body:', req.body); // Log the body
  next();
});

// Login route
app.post('/login', (req, res) => {
  console.log('Request Body:', req.body); // Log the entire body
  const { user_id, phone_number } = req.body;
  console.log('Received user_id:', user_id, 'phone_number:', phone_number); // Log input

  db.query('SELECT * FROM users WHERE user_id = ? AND phone_number = ?', [user_id, phone_number], (err, result) => {
    if (err) return res.status(500).json({ error: err });
    console.log('Database result:', result); // Log query result
    if (result.length === 0) return res.status(404).json({ error: 'User not found' });

    const user = result[0];
    const otp = generateOtp();
    const otpExpiry = new Date(Date.now() + otpExpiryTime);

    // Update user OTP and expiry in DB
    db.query('UPDATE users SET otp_code = ?, otp_expiry = ? WHERE user_id = ?', [otp, otpExpiry, user_id], (err) => {
      if (err) return res.status(500).json({ error: err });
      sendOtpEmail(user.email, otp);
      res.json({ message: 'OTP sent to your registered email.' });
    });
  });
});

// Verify OTP and issue JWT token
app.post('/verify-otp', (req, res) => {
  const { user_id, otp } = req.body;
  
  db.query('SELECT * FROM users WHERE user_id = ? AND otp_code = ?', [user_id, otp], (err, result) => {
    if (err) return res.status(500).json({ error: err });
    if (result.length === 0) return res.status(400).json({ error: 'Invalid OTP' });

    const user = result[0];
    if (new Date() > new Date(user.otp_expiry)) {
      return res.status(400).json({ error: 'OTP has expired' });
    }
    // Ensure you're generating the token like this
const token = jwt.sign({ user_id: user.user_id }, secretKey, { expiresIn: '1h' });
console.log('Generated Token:', token); // Log the token for debugging

   
  });
});



// Get user dashboard information
app.get('/dashboard', authenticateToken, (req, res) => {
  console.log('Incoming request:', req.headers); // Log request headers
  console.log('Decoded user ID:', req.user.user_id); // Log the decoded user ID

  const user_id = req.user.user_id;

  db.query(
      `SELECT u.user_id, u.name, u.phone_number, u.email, u.account_amount, s.package_id, s.duration_in_months, s.total_price, p.package_speed
      FROM users u
      LEFT JOIN payments pay ON pay.user_id = u.user_id
      LEFT JOIN subscriptions s ON s.subscription_id = pay.subscription_id
      LEFT JOIN packages p ON p.package_id = s.package_id
      WHERE u.user_id = ?`, 
      [user_id], 
      (err, result) => {
          if (err) {
              console.error('Database error:', err); // Log any database errors
              return res.status(500).json({ error: err });
          }
          if (result.length === 0) {
              return res.status(404).json({ error: 'No subscriptions found' });
          }

          const userData = result[0];
          res.json({
              user_id: userData.user_id,
              name: userData.name,
              phone_number: userData.phone_number,
              email: userData.email,
              account_amount: userData.account_amount,
              package: {
                  speed: userData.package_speed,
                  duration: userData.duration_in_months,
                  total_price: userData.total_price
              }
          });
      }
  );
});

// Update user profile
app.put('/update-profile', authenticateToken, (req, res) => {
  const { name, email, phone_number } = req.body;
  const user_id = req.user.user_id;

  db.query('UPDATE users SET name = ?, email = ?, phone_number = ? WHERE user_id = ?', 
    [name, email, phone_number, user_id], 
    (err) => {
      if (err) return res.status(500).json({ error: err });
      res.json({ message: 'Profile updated successfully' });
    }
  );
});

app.get('/users', (req, res) => {
  db.query('SELECT user_id, name, phone_number, email, account_amount FROM users', (err, result) => {
    if (err) return res.status(500).json({ error: err });
    res.json(result); // Send the array of users back in the response
  });
});

// Start server
const PORT = process.env.PORT || 8000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
